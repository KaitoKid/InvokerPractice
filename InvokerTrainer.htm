<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Invoker Trainer by /-ATHF-\ Ignignokt</title>
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script> 
    <script type="text/javascript" src="http://code.stephenmorley.org/javascript/queues/Queue.js"></script> 
   
    <script type="text/javascript">
        (function ($) {
            $.cookie = function (key, value, options) {

                // key and at least value given, set cookie...
                if (arguments.length > 1 && (!/Object/.test(Object.prototype.toString.call(value)) || value === null || value === undefined)) {
                    options = $.extend({}, options);

                    if (value === null || value === undefined) {
                        options.expires = -1;
                    }

                    if (typeof options.expires === 'number') {
                        var days = options.expires, t = options.expires = new Date();
                        t.setDate(t.getDate() + days);
                    }

                    value = String(value);

                    return (document.cookie = [
                encodeURIComponent(key), '=', options.raw ? value : encodeURIComponent(value),
                options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
                options.path ? '; path=' + options.path : '',
                options.domain ? '; domain=' + options.domain : '',
                options.secure ? '; secure' : ''
            ].join(''));
                }

                // key and possibly options given, get cookie...
                options = value || {};
                var decode = options.raw ? function (s) { return s; } : decodeURIComponent;

                var pairs = document.cookie.split('; ');
                for (var i = 0, pair; pair = pairs[i] && pairs[i].split('='); i++) {
                    if (decode(pair[0]) === key) return decode(pair[1] || ''); // IE saves cookies with empty string as "c; ", e.g. without "=" as opposed to EOMB, thus pair[1] may be undefined
                }
                return null;
            };
        })(jQuery);

        (function ($) {
            $.timer = function (func, time, autostart) {
                this.set = function (func, time, autostart) {
                    this.init = true;
                    if (typeof func == 'object') {
                        var paramList = ['autostart', 'time'];
                        for (var arg in paramList) { if (func[paramList[arg]] != undefined) { eval(paramList[arg] + " = func[paramList[arg]]"); } };
                        func = func.action;
                    }
                    if (typeof func == 'function') { this.action = func; }
                    if (!isNaN(time)) { this.intervalTime = time; }
                    if (autostart && !this.active) {
                        this.active = true;
                        this.setTimer();
                    }
                    return this;
                };
                this.once = function (time) {
                    var timer = this;
                    if (isNaN(time)) { time = 0; }
                    window.setTimeout(function () { timer.action(); }, time);
                    return this;
                };
                this.play = function (reset) {
                    if (!this.active) {
                        if (reset) { this.setTimer(); }
                        else { this.setTimer(this.remaining); }
                        this.active = true;
                    }
                    return this;
                };
                this.pause = function () {
                    if (this.active) {
                        this.active = false;
                        this.remaining -= new Date() - this.last;
                        this.clearTimer();
                    }
                    return this;
                };
                this.stop = function () {
                    this.active = false;
                    this.remaining = this.intervalTime;
                    this.clearTimer();
                    return this;
                };
                this.toggle = function (reset) {
                    if (this.active) { this.pause(); }
                    else if (reset) { this.play(true); }
                    else { this.play(); }
                    return this;
                };
                this.reset = function () {
                    this.active = false;
                    this.play(true);
                    return this;
                };
                this.clearTimer = function () {
                    window.clearTimeout(this.timeoutObject);
                };
                this.setTimer = function (time) {
                    var timer = this;
                    if (typeof this.action != 'function') { return; }
                    if (isNaN(time)) { time = this.intervalTime; }
                    this.remaining = time;
                    this.last = new Date();
                    this.clearTimer();
                    this.timeoutObject = window.setTimeout(function () { timer.go(); }, time);
                };
                this.go = function () {
                    if (this.active) {
                        this.action();
                        this.setTimer();
                    }
                };

                if (this.init) {
                    return new $.timer(func, time, autostart);
                } else {
                    this.set(func, time, autostart);
                    return this;
                }
            };
        })(jQuery);

        $(function () {
            $(document).keydown(function (event) {
                if ($.browser.msie)
                { handleKeyboard(event.keyCode.toString()); }
                else
                { handleKeyboard(event.which.toString()); }
            });

            $('#soundOnOff').on('change', 
                                function () { 
                                    window.soundOnOff = $('#soundOnOff').is(':checked');

                                    if(window.soundOnOff == true)
                                    {
                                        $('#lblSoundOnOff').text('Sound On');
                                    }
                                    else
                                    {
                                        $('#lblSoundOnOff').text('Sound Off');
                                    }
                                });


            window.currentSpellIndex = 0;
            window.quasColor = "#00FFFF";
            window.wexColor = "#FF00FF";
            window.exortColor = "#FFD700";
            window.gameMode = "None";
            window.spellsInvoked = 0;
            window.keysPressed = 0;
            window.endlessGameStarted = false;
            window.invokedSpells = [null, null];
            window.challengeSpells = [new Object(), new Object()];
            window.spellsCast = 0;
            window.challengeSpellOneIndex = 0;
            window.challengeSpellTwoIndex = 1;
            window.soundHandle = document.getElementById('soundHandle');
            window.soundOnOff = $('#soundOnOff').is(':checked');

            //default keys QWER
            if (!$.cookie('quasKey')) {
                $.cookie('quasKey', '81');
            }

            if (!$.cookie('wexKey')) {
                $.cookie('wexKey', '87', { expires: 9999 });
            }

            if (!$.cookie('exortKey')) {
                $.cookie('exortKey', '69', { expires: 9999 });
            }

            if (!$.cookie('invokeKey')) {
                $.cookie('invokeKey', '82', { expires: 9999 });
            }

            if (!$.cookie('spellOneKey')) {
                $.cookie('spellOneKey', '68', { expires: 9999 });
            }

            if (!$.cookie('spellTwoKey')) {
                $.cookie('spellTwoKey', '70', { expires: 9999 });
            }

            $('#lblQuasKey').text(String.fromCharCode($.cookie('quasKey')));
            $('#lblWexKey').text(String.fromCharCode($.cookie('wexKey')));
            $('#lblExortKey').text(String.fromCharCode($.cookie('exortKey')));
            $('#lblInvokeKey').text(String.fromCharCode($.cookie('invokeKey')));
            $('#lblSpellOneKey').text(String.fromCharCode($.cookie('spellOneKey')));
            $('#lblSpellTwoKey').text(String.fromCharCode($.cookie('spellTwoKey')));
            $('#lblSpellOneWarning').hide();

            window.spellQueue = new Object();
            window.spellQueue = ["", "", ""];

            window.nextSpellNumber = new Array();
            window.nextSpellNumber = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

            window.spellList = new Array();
            window.spellList[0] = new Object();
            window.spellList[0].value = "Cold Snap";
            window.spellList[0].keycombo1 = "quas quas quas";

            window.spellList[1] = new Object();
            window.spellList[1].value = "Ghost Walk";
            window.spellList[1].keycombo1 = "quas quas wex";
            window.spellList[1].keycombo2 = "quas wex quas";
            window.spellList[1].keycombo3 = "wex quas quas";

            window.spellList[2] = new Object();
            window.spellList[2].value = "Ice Wall";
            window.spellList[2].keycombo1 = "quas quas exort";
            window.spellList[2].keycombo2 = "quas exort quas";
            window.spellList[2].keycombo3 = "exort quas quas";

            window.spellList[3] = new Object();
            window.spellList[3].value = "Tornado";
            window.spellList[3].keycombo1 = "wex wex quas";
            window.spellList[3].keycombo2 = "wex quas wex";
            window.spellList[3].keycombo3 = "quas wex wex";

            window.spellList[4] = new Object();
            window.spellList[4].value = "Deafening Blast";
            window.spellList[4].keycombo1 = "quas wex exort";
            window.spellList[4].keycombo2 = "quas exort wex";
            window.spellList[4].keycombo3 = "wex quas exort";
            window.spellList[4].keycombo4 = "wex exort quas";
            window.spellList[4].keycombo5 = "exort wex quas";
            window.spellList[4].keycombo6 = "exort quas wex";

            window.spellList[5] = new Object();
            window.spellList[5].value = "Forge Spirit";
            window.spellList[5].keycombo1 = "exort exort quas";
            window.spellList[5].keycombo2 = "exort quas exort";
            window.spellList[5].keycombo3 = "quas exort exort";

            window.spellList[6] = new Object();
            window.spellList[6].value = "EMP";
            window.spellList[6].keycombo1 = "wex wex wex";

            window.spellList[7] = new Object();
            window.spellList[7].value = "Alacrity";
            window.spellList[7].keycombo1 = "wex wex exort";
            window.spellList[7].keycombo2 = "wex exort wex";
            window.spellList[7].keycombo3 = "exort wex wex";

            window.spellList[8] = new Object();
            window.spellList[8].value = "Chaos Meteor";
            window.spellList[8].keycombo1 = "exort exort wex";
            window.spellList[8].keycombo2 = "exort wex exort";
            window.spellList[8].keycombo3 = "wex exort exort";

            window.spellList[9] = new Object();
            window.spellList[9].value = "Sun Strike";
            window.spellList[9].keycombo1 = "exort exort exort";

        });

        function handleKeyboard(key) {
            if ((window.timer && window.timer.active && (window.gameMode == 'Classic' || window.gameMode == 'TimeTrial' || window.gameMode == 'Challenge')) ||
                (window.endlessGameStarted = true && window.gameMode == 'Endless')) {
                switch (key) {
                    case $.cookie('quasKey'):
                        enqueueElement('quas');
                        break;
                    case $.cookie('wexKey'):
                        enqueueElement('wex');
                        break;
                    case $.cookie('exortKey'):
                        enqueueElement('exort');
                        break;
                    case $.cookie('invokeKey'):
                        invokeSpell();
                        break;                       
                    case $.cookie('spellOneKey'):
                        castSpell(0);
                        break;   
                    case $.cookie('spellTwoKey'):
                        castSpell(1);
                        break;
                    default:
                        break;
                }

                $('#lblKeysPressed').text('Keys Pressed: ' + window.keysPressed++);
            }
        }

        function enqueueElement(spell) {
            window.spellQueue[0] = window.spellQueue[1];
            $('#divOne').css('background-color', $('#divTwo').css('background-color'));
            window.spellQueue[1] = window.spellQueue[2];
            $('#divTwo').css('background-color', $('#divThree').css('background-color'));
            window.spellQueue[2] = spell;

            switch (spell) {
                case 'quas':
                    $('#divThree').css('background-color', window.quasColor);
                    break;
                case 'wex':
                    $('#divThree').css('background-color', window.wexColor);
                    break;
                case 'exort':
                    $('#divThree').css('background-color', window.exortColor);
                    break;
                default:
                    break;
            }

        }

        function invokeSpell() {

            if (window.gameMode != "Challenge") {
                var currentChallengeSpell = window.spellList[window.nextSpellNumber[window.currentSpellIndex]];


                if (isSpellCorrect(currentChallengeSpell)) {
                    window.currentSpellIndex++;
                    displayNextSpell();
                }
            }
            else {
                    var newInvokedSpell = getNewlyInvokedSpell();

                    if (window.invokedSpells[0] == null ||
                        (newInvokedSpell.spell.value != window.invokedSpells[0].spell.value)) {

                        window.invokedSpells[1] = window.invokedSpells[0];
                        window.invokedSpells[0] = newInvokedSpell;

                        $('#lblSpellOne').text(window.invokedSpells[0].spell.value);

                        if (window.invokedSpells[1]) {
                            $('#lblSpellTwo').text(window.invokedSpells[1].spell.value);
                        }

                        $('#lblSpellOneWarning').hide();
                    }
                    else {
                        $('#lblSpellOneWarning').show();
                    }
            }
                

            $('#lblSpellsInvoked').text("Spells Invoked: " + ++window.spellsInvoked);

            if (window.gameMode == 'Classic') {
                $('#lblSpellsLeft').text("Spells Left: " + (10 - window.currentSpellIndex));
            }

        }        

        function isSpellCorrect(currentChallengeSpell) {
            var currentSpellQueue = getSpellQueue();

            if (currentChallengeSpell.spell) {
                return (currentSpellQueue == currentChallengeSpell.spell.keycombo1 ||
                    currentSpellQueue == currentChallengeSpell.spell.keycombo2 ||
                    currentSpellQueue == currentChallengeSpell.spell.keycombo3 ||
                    currentSpellQueue == currentChallengeSpell.spell.keycombo4 ||
                    currentSpellQueue == currentChallengeSpell.spell.keycombo5 ||
                    currentSpellQueue == currentChallengeSpell.spell.keycombo6)
            }
            else {
                return (currentSpellQueue == currentChallengeSpell.keycombo1 ||
                    currentSpellQueue == currentChallengeSpell.keycombo2 ||
                    currentSpellQueue == currentChallengeSpell.keycombo3 ||
                    currentSpellQueue == currentChallengeSpell.keycombo4 ||
                    currentSpellQueue == currentChallengeSpell.keycombo5 ||
                    currentSpellQueue == currentChallengeSpell.keycombo6)
            }
            
        }

        function getNewlyInvokedSpell()
        {
            for(var i=0; i<window.spellList.length; i++)
            {
                var checkAgainstSpell = new Object();
                checkAgainstSpell.spell = window.spellList[i];

                if(isSpellCorrect(checkAgainstSpell))
                {                    
                    return checkAgainstSpell;
                }
            }
        }

        function displayNextSpell() {
            if (window.currentSpellIndex < 10) {
                if (window.gameMode != 'Challenge') {
                    $('#lblSpell').text(window.spellList[window.nextSpellNumber[window.currentSpellIndex]].value);
                }
                else {
                    $('#lblSpell').text(window.challengeSpells[0].spell.value + ", " + window.challengeSpells[1].spell.value)                    
                }
            }
            else {
                switch(window.gameMode)
                {
                    case 'Classic':
                        window.timer.stop();

                        if (window.soundOnOff) {
                            window.soundHandle.src = 'http://www.dota2wiki.com/images/6/67/Invo_ability_invoke_17.mp3';
                            window.soundHandle.play();
                        }
                        $('#lblSpell').html('Arcana known only to me!<br />Congratulations! Your time: ' + window.count + ' seconds.');
                        $('#btnStart').text('Restart');
                        $('#btnStart').show();
                        $('#btnReturn').show();
                        break;
                    case 'TimeTrial': 
                        setupQueueForRandomSpellSelection();
                        $('#lblSpell').text(window.spellList[window.nextSpellNumber[window.currentSpellIndex]].value);                       
                        break;
                    case 'Endless':
                        setupQueueForRandomSpellSelection();
                        $('#lblSpell').text(window.spellList[window.nextSpellNumber[window.currentSpellIndex]].value);
                        break;
                    case 'Challenge':                    
                        setupQueueForRandomSpellSelection();
                        $('#lblSpell').html(window.challengeSpells[window.CurrentSpellIndex].spell.value + ", " + window.challengeSpells[window.currentSpellIndex + 1].spell.value);
                        break;
                }
            }
        }

        function setupQueueForRandomSpellSelection()
        {
            window.currentSpellIndex = 0;
            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.reverse();
            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.reverse();
            window.nextSpellNumber.sort(sortRandom);
        }

        function getSpellQueue() {
            return (window.spellQueue[0] + " " + window.spellQueue[1] + " " + window.spellQueue[2]);
        }

        function sortRandom()
        { return (0.5 - Math.random()); }

        function showHideMenuClick() {
            if ($('#cheatsheet').css('display') == 'block') {
                $('#cheatsheet').css('display', 'none');
                $('#btnShowHide').text('Show Cheat Sheet');
            }
            else {
                $('#cheatsheet').css('display', 'block');
                $('#btnShowHide').text('Hide Cheat Sheet');
            }
        }

        function showHideAboutClick() {
            if ($('#aboutDiv').css('display') == 'block') {
                $('#aboutDiv').css('display', 'none');
                $('#btnAbout').text('About');
            }
            else {
                $('#aboutDiv').css('display', 'block');
                $('#btnAbout').text('Hide About');
            }
        }

        function configureControls() {
            //keydown recognizes only capital ascii codes
            var quasKey = prompt("Press Key for Quas").toUpperCase();
            var wexKey = prompt("Press Key for Wex").toUpperCase();
            var exortKey = prompt("Press Key for Exort").toUpperCase();
            var invokeKey = prompt("Press Key for Invoke").toUpperCase();
            var spellOneKey = prompt("Press Key for Spell One").toUpperCase();
            var spellTwoKey = prompt("Press Key for Spell Two").toUpperCase();

            $.cookie('quasKey', quasKey.charCodeAt(0), { expires: 9999 });
            $.cookie('wexKey', wexKey.charCodeAt(0), { expires: 9999 });
            $.cookie('exortKey', exortKey.charCodeAt(0), { expires: 9999 });
            $.cookie('invokeKey', invokeKey.charCodeAt(0), { expires: 9999 });
            $.cookie('spellOneKey', spellOneKey.charCodeAt(0), { expires: 9999 });
            $.cookie('spellTwoKey', spellTwoKey.charCodeAt(0), { expires: 9999 });

            $('#lblQuasKey').text(quasKey[0]);
            $('#lblWexKey').text(wexKey[0]);
            $('#lblExortKey').text(exortKey[0]);
            $('#lblInvokeKey').text(invokeKey[0]);
            $('#lblSpellOneKey').text(spellOneKey[0]);
            $('#lblSpellTwoKey').text(spellTwoKey[0]);
        }

        function loadGame(gameType) {
            window.gameMode = gameType;
            $('#btnConfigure').hide();
            $('#btnStart').show();
            $('#btnClassic').hide();
            $('#btnTimeTrial').hide();
            $('#btnReturn').show();
            $('#btnEndless').hide();
            $('#btnChallenge').hide()
            $('#settingsHeader').hide();
            $('#playHeader').hide();
            $('#lblSpell').show();

            $('#lblSpell').text('Click start to begin.');

            switch (window.gameMode) {
                case 'Classic':
                    $('#lblTimer').html('Time: 30 seconds');
                    $('#lblSpellsLeft').html('Spells Left: 10');
                    $('#lblSpellsInvoked').html('Spells Invoked: 0');
                    break;
                case 'TimeTrial':
                    $('#lblTimer').html('Time: 30 seconds');
                    $('#lblSpellsLeft').html('Spells Left: -');
                    $('#lblSpellsInvoked').html('Spells Invoked: 0');
                    break;
                case 'Endless':
                    $('#lblSpellsLeft').html('Spells Left: -');
                    $('#lblTimer').html('Time: -');
                    break;
                case 'Challenge':
                    $('#lblTimer').html('Time: 30 seconds');
                    $('#lblSpellsLeft').html('Spells Left: -');
                    $('#lblSpellsInvoked').html('Spells Cast: 0');
                    break;
                default:
                    break;
            }

            $('#lblKeysPressed').html('Keys Pressed: 0');
        }

        function startGame() {
            $('#divOne').css('background-color', '#FFFFFF');
            $('#divTwo').css('background-color', '#FFFFFF');
            $('#divThree').css('background-color', '#FFFFFF');

            window.currentSpellIndex = 0;
            window.spellsInvoked = 0;
            window.keysPressed = 0;
            window.spellsCast = 0;
            window.spellQueue = ["", "", ""];
            window.challengeSpellOneIndex = 0;
            window.challengeSpellTwoIndex = 1;

            //Yes this is duplicate code, makes it easier to do "Restart"
            switch (window.gameMode) {
                case 'Classic':
                    $('#lblTimer').html('Time: 30 seconds');
                    $('#lblSpellsLeft').html('Spells Left: 10');
                    startClassic();
                    break;
                case 'TimeTrial': 
                    $('#lblTimer').html('Time: 30 seconds');
                    $('#lblSpellsLeft').html('Spells Left: -');                   
                    startTimeTrial();
                    break;
                case 'Endless':
                    $('#lblSpellsLeft').html('Spells Left: -');
                    $('#lblTimer').html('Time: 0 seconds');
                    window.endlessGameStarted = true;
                    startEndless();
                    break;
                case 'Challenge':
                    $('#lblTimer').html('Time: 30 seconds');
                    $('#lblSpellsLeft').html('Spells Left: -');
                    $('#lblSpellOne').html('Spell One');
                    $('#lblSpellTwo').html('Spell Two');
                    startChallenge();
                default:
                    break;
            }
            
            $('#lblSpellsInvoked').html('Spells Invoked: 0');
            $('#lblKeysPressed').html('Keys Pressed: 0');
        }

        function returnToMain() {
            window.gameMode = 'None';

            if (window.timer) {
                window.timer.stop();
                window.timer = null;
            }

            window.count = 0;

            $('#btnConfigure').show();
            $('#btnStart').hide();
            $('#btnClassic').show();
            $('#btnTimeTrial').show();
            $('#btnReturn').hide();
            $('#btnEndless').show();
            $('#btnChallenge').show();
            $('#settingsHeader').show();
            $('#playHeader').show();
            $('#lblSpell').hide();
            $('#lblSpellOneWarning').hide();
            $('#lblSpellOne').html('Spell One');
            $('#lblSpellTwo').html('Spell Two');
            
            $('#divOne').css('background-color', window.quasColor);
            $('#divTwo').css('background-color', window.wexColor);
            $('#divThree').css('background-color', window.exortColor);

            $('#lblTimer').html('Time: -');
            $('#lblSpellsLeft').html('Spells Left: -');
            $('#lblSpellsInvoked').html('Spells Invoked: -');
            $('#lblKeysPressed').html('Keys Pressed: -');

            $('#btnStart').text('Start');

            window.endlessGameStarted = false;
        }

        function startClassic() {

            window.timer = $.timer(function () {
                $('#lblTimer').html('Time: ' + (30 - ++(window.count)) + ' seconds');

                if (count >= 30) {
                    window.timer.stop();

                    if (window.soundOnOff) {
                        window.soundHandle.src = 'http://www.dota2wiki.com/images/1/1b/Invo_lose_03.mp3';
                        window.soundHandle.play();
                    }

                    $('#lblSpell').html('My mind....unravels!<br />You failed to invoke all 10 spells in 30 seconds.');
                    $('#btnStart').text('Restart');
                    $('#btnStart').show();
                    $('#btnReturn').show();
                }
            });
            window.timer.set({ time: 1000, autostart: false });

            window.count = 0;

            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);

            window.timer.play(true);

            $('#btnStart').hide();
            $('#btnReturn').hide();

            displayNextSpell();
           
        }

        function startTimeTrial() {

            window.timer = $.timer(function () {
                $('#lblTimer').html('Time: ' + (30 - ++(window.count)) + ' seconds');

                if (count >= 30) {
                    window.timer.stop();


                    if (window.soundOnOff) {
                        window.soundHandle.src = 'http://www.dota2wiki.com/images/0/09/Invo_begin_01.mp3';
                        window.soundHandle.play();
                    }

                    $('#lblSpell').html('So begins a new age of knowledge!<br \>You invoked ' + window.spellsInvoked + " spells in 30 seconds.");
                    $('#btnStart').text('Restart');
                    $('#btnStart').show();
                    $('#btnReturn').show();
                }
            });
            window.timer.set({ time: 1000, autostart: false });

            window.count = 0;

            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);

            window.timer.play(true);

            $('#btnStart').hide();
            $('#btnReturn').hide();

            displayNextSpell();
        }

        function startEndless() {

            $('#btnStart').text('Restart');

            if (!window.timer) {
                window.timer = $.timer(function () {
                    $('#lblTimer').html('Time: ' + (++(window.count)) + ' seconds')
                });
                window.timer.set({ time: 1000, autostart: false });

                window.timer.play(true);
            }

            window.count = 0;
            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);
            
            displayNextSpell();
        }

        function startChallenge() {

            window.timer = $.timer(function () {
                $('#lblTimer').html('Time: ' + (30 - ++(window.count)) + ' seconds');

                if (count >= 30) {
                    window.timer.stop();

                    if(window.soundOnOff)
                    {
                        window.soundHandle.src = 'http://www.dota2wiki.com/images/8/8a/Invo_level_09.mp3';
                        window.soundHandle.play();
                    }

                    $('#lblSpell').html('The bliss of comprehension!<br \>You cast ' + window.spellsCast + " combinations in 30 seconds.");
                    $('#btnStart').text('Restart');
                    $('#btnStart').show();
                    $('#btnReturn').show();
                }
            });
            window.timer.set({ time: 1000, autostart: false });
            
            window.invokedSpells = [null, null];
            window.count = 0;

            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);
            window.nextSpellNumber.sort(sortRandom);

            window.challengeSpells[0].spell = window.spellList[window.nextSpellNumber[window.currentSpellIndex]];
            window.challengeSpells[0].hasBeenCast = false;
            window.challengeSpells[1].spell = window.spellList[window.nextSpellNumber[window.currentSpellIndex+1]];
            window.challengeSpells[1].hasBeenCast = false;
            
            window.timer.play(true);

            $('#btnStart').hide();
            $('#btnReturn').hide();

            displayNextSpell();
        }

        function castSpell(which) {

            var spellCast = window.invokedSpells[which];

            var spellOneHtml = window.challengeSpells[0].spell.value;
            var spellTwoHtml = window.challengeSpells[1].spell.value;

            if (spellCast && spellCast.spell  && spellCast.spell.value == window.challengeSpells[0].spell.value) {
                window.challengeSpells[0].hasBeenCast = true;
                spellOneHtml = "<s>" + spellOneHtml + "</s>";
            }
            else if (spellCast && spellCast.spell && spellCast.spell.value == window.challengeSpells[1].spell.value) {
                window.challengeSpells[1].hasBeenCast = true;
                spellTwoHtml = "<s>" + spellTwoHtml + "</s>";
            }
            
            $('#lblSpell').html(spellOneHtml + ", " + spellTwoHtml);
           
            if(window.challengeSpells[0].hasBeenCast && window.challengeSpells[1].hasBeenCast) {
                window.spellsCast++;
                window.currentSpellIndex += 2;

                if (currentSpellIndex > 8) {
                    setupQueueForRandomSpellSelection();
                    window.currentSpellIndex = 0;
                }

                window.challengeSpells[0].spell = window.spellList[window.nextSpellNumber[window.currentSpellIndex]];
                window.challengeSpells[0].hasBeenCast = false;
                window.challengeSpells[1].spell = window.spellList[window.nextSpellNumber[window.currentSpellIndex + 1]];
                window.challengeSpells[1].hasBeenCast = false;
           
                displayNextSpell();
            }
        }

    </script>
  
    <style>
         body
         {
                font:12px/17px 'Trebuchet MS', Arial, Helvetica, sans-serif;    
	            color:#6d6e65;
         }
	
        .threecol-mask {
	            position:relative;	
	            clear:both;
	            float:left;
	            margin-top: 20px;
	            width:100%;			
	            min-width:950px;
	            overflow:hidden;	
            }

            .threecol-midmask, .threecol-leftmask {
	            float:left;
	            width:100%;			
	            position:relative;
            }

            .threecol-mid, .threecol-left, .threecol-right {
	            float:left;
	            position:relative;
	            padding:0 0 1em 0;	
	            overflow:hidden;	                   
            }

            .threecol-midmask {
	            right:25%;			
            }

            .threecol-leftmask {
	            right:50%;
            }

            .threecol-mid {
	            width:47%;
	            left:93%;
                background: #FFFFFF;
            }
            .threecol-left {
	            width:13%;
	            left:32%;
	            background-color: #FFFFFF;
            }

            .threecol-right {
	            width:34%;			
	            left:82%;			
	            background-color: #FFFFFF;
            }

    </style>
</head>
<body>

    <div class="threecol-mask">
        <div class="threecol-midmask">
            <div class="threecol-leftmask">

                <div class="threecol-mid" style="text-align:center">
                    <h1>Invoker Trainer by /-ATHF-\ Ignignokt</h1>

                    <div style="margin-top:30px"> 
                        <div style="width:200px; margin-left:auto; margin-right:auto; text-align:center;">
                            <div id="divOne" style="margin: 5px; width:50px; height:50px; float:left; border-radius:100%; border: 1px solid #000000; background-color:#00FFFF"></div>
                            <div id="divTwo" style="margin: 5px; width:50px; height:50px; float:left;border-radius:100%; border: 1px solid #000000; background-color:#FF00FF"></div>
                            <div id="divThree" style="margin: 5px; width:50px; height:50px; float:left; border-radius:100%; border: 1px solid #000000; background-color:#FFD700"></div> 
                        </div>
                    </div>

                    <div style="margin-top:125px; margin-left:auto; margin-right:auto; text-align:center; width:100%">
                        <label id="lblSpell" style="line-height:26px;font-size:large; font-weight:bold;"></label>
                    </div>
                    
                    <div style="margin-left:auto; margin-right:auto; text-align:center; width:400px; ">                        
                        <h2 id="settingsHeader">Settings:</h2>
                        <button id="btnConfigure" onclick="configureControls();">Configure</button><br /><br />
                        
                        <h2 id="playHeader">Play:</h2>
                        <button id="btnClassic" onclick="loadGame('Classic');">Classic</button>
                        <button id="btnTimeTrial" onclick="loadGame('TimeTrial');">Time Trial</button>                        
                        <button id="btnEndless" onclick="loadGame('Endless');">Endless</button>                 
                        <button id="btnChallenge" onclick="loadGame('Challenge');">Challenge</button>
                        <br /><br /><br /><br />
                        <button id="btnStart" style="display:none; width: 75px;" onclick="startGame();">Start</button>     
                        &nbsp&nbsp&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp&nbsp&nbsp                 
                        <button id="btnReturn" style="display:none;" onclick="returnToMain();">Main Menu</button>

                    </div>
                </div>

                <div class="threecol-left" style="text-align:left;">
                    <input type="checkbox" id="soundOnOff"/><label id='lblSoundOnOff'>Sound Off</label>
                     <h3 style ="margin-top:90px">Stats:</h3>
                     <div style="margin-top:5px; margin-left:auto; margin-right:auto;">
                        <label id="lblTimer" style="font-size:normal; font-weight:bold;">Time: -</label>
                    </div> 
                    
                     <div style="margin-top:10px; margin-left:auto; margin-right:auto;">
                        <label id="lblSpellsLeft" style="font-size:normal; font-weight:bold;">Spells Left: -</label>
                    </div>                      
                    
                     <div style="margin-top:10px; margin-left:auto; margin-right:auto;">
                        <label id="lblSpellsInvoked" style="font-size:normal; font-weight:bold;">Spells Invoked: -</label>
                    </div> 

                    <div style="margin-top:10px; margin-left:auto; margin-right:auto;">
                        <label id="lblKeysPressed" style="font-size:normal; font-weight:bold;">Keys Pressed: -</label>
                    </div> 

                    <div style="margin-top:225px; margin-left:auto; margin-right:auto;">
                        <button id="btnAbout" onclick="showHideAboutClick();" style="margin-bottom:15px">About</button>
                         <div id="aboutDiv" style="display:none">
                            This app was created to help <br />
                            DotA players new to Invoker <br />
                            memorize his spell <br />
                            combinations and make <br />
                            learning Invoker <br />
                            a little less daunting. <br /><br />

                            My name is not Ignignokt, </br.>
                            but I am a software consultant
                            in the Chicago area specializing <br />
                            in Web development, <br/>
                            specifically Microsoft and .NET <br />
                            technologies.<br /><br />

                            Comments and suggestions can <br />
                            be sent to: <a href="mailto:stsoftwaresolutions@gmail.com">stsoftwaresolutions@gmail.com</a><br />
                            (It's just me, not a company)<br />
                            
                        </div>
                    </div> 
                </div>

                <div class="threecol-right">
                    <b>Instructions:</b>     <br/>                   
                        - Controls:  <br/>
                            &nbsp&nbsp&nbsp&nbsp <label id="lblQuasKey"></label> - Quas  <br/>
                            &nbsp&nbsp&nbsp&nbsp <label id="lblWexKey"></label> - Wex <br/> 
                            &nbsp&nbsp&nbsp&nbsp <label id="lblExortKey"></label> - Exort <br/>
                            &nbsp&nbsp&nbsp&nbsp <label id="lblInvokeKey"></label> - Invoke Spell <br/>
                            &nbsp&nbsp&nbsp&nbsp <label id="lblSpellOneKey"></label> - <label id="lblSpellOne">Spell One</label> <label id="lblSpellOneWarning" style="color:#FF0000">Already Invoked!</label><br/>
                            &nbsp&nbsp&nbsp&nbsp <label id="lblSpellTwoKey"></label> - <label id="lblSpellTwo">Spell Two</label><br/><br />
                            -Click Configure to customize controls <br />&nbsp&nbsp(cookies must be enabled)
                             <br/> <br/>
                        - Choose A Mode and Click Start <br/>
                            &nbsp&nbsp&nbsp&nbsp- Classic - Invoke 10 spells as fast as you can. <br/>
                            &nbsp&nbsp&nbsp&nbsp- Time Trial - Invoke as many spells as possible in 30 <br />
                            &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp seconds <br/>
                            &nbsp&nbsp&nbsp&nbsp- Endless - No timer. Practice for as long as you want. <br />
                            &nbsp&nbsp&nbsp&nbsp- Challenge - Invoke <u>and cast</u> as many combinations <br />
                            &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp of spells in 30 seconds as you can.<br/> <br/>

                        - For new Invokers <a href="http://www.dota2wiki.com/wiki/Invoker#Invoked_Skills">here</a> is a list of what the spells do.<br/><br />
                        - As well as <a href="http://www.dota2wiki.com/wiki/Invoker#Abilities">what</a> quas, wex and exort do when not <br/>
                        &nbsp invoked. <br/><br />

                        - Special thanks to <a href="http://www.reddit.com/r/DotA2">r/DotA2</a> for the suggestions!
                        <br /><br />
                         <button id="btnShowHide" onclick="showHideMenuClick();">Show Cheat Sheet</button>
                         <div id="cheatsheet" style="display:none">
                            <ul style="list-style:none; padding:0;">
                                <li>Cold Snap - Quas Quas Quas</li>
                                <li>Ghost Walk - Quas Quas Wex</li>
                                <li>Ice Wall - Quas Quas Exort</li>
                                <li>EMP - Wex Wex Wex</li>
                                <li>Tornado - Wex Wex Quas</li>
                                <li>Alacrity - Wex Wex Exort</li>
                                <li>Sun Strike - Exort Exort Exort</li>
                                <li>Forge Spirit - Exort Exort Quas</li>
                                <li>Chaos Meteor - Exort Exort Wex</li>
                                <li>Deafening Blast - Quas Wex Exort</li>
                                
                            </ul>
                        </div>
                </div>
            </div>
        </div>
        <audio id="soundHandle" style="display: none;"></audio>

        <div class="clear" />
     
</body>
</html>